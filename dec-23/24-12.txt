class Solution {
public:
    int diff(vector<int> original,vector<int> expected){
        int cnt = 0;
        for(int i = 0;i<original.size();i++){
            if(original[i]!=expected[i]) cnt++;
        }
        return cnt;
    }
    int minOperations(string s) {
        int n = s.size();
        vector<int>a;
        for(auto ch:s){
            if(ch=='0') a.push_back(0);
            else if(ch=='1') a.push_back(1);
        }
        vector<int> zero;
        zero.push_back(0);
        for(int i = 1;i<n;i++){
            zero.push_back(!zero[i-1]);
        }
        vector<int> one;
        one.push_back(1);
        for(int i = 1;i<n;i++){
            one.push_back(!one[i-1]);
        }
        return min(diff(a, zero), diff(a, one));
    }
};

yeh neeche wala acha approach hai dry run karke dekho
/*

Author : Manas Rawat
Date : 24/12/2023
Problem : Minimum Changes To Make Alternating Binary String
Difficulty : Easy
Problem Link : https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/
Video Solution : https://youtu.be/tHcQEvAPE68

*/


class Solution {
public:
    int minOperations(string s) {
        // start with 0
        
        int expect = 0;
        int ans1 = 0;
        
        for(auto i : s){
            ans1 += expect != (i - '0');
            
            expect ^= 1;
        }
        
        // start with 1
        
        expect = 1;
        int ans2 = 0;
        
        for(auto i : s){
            ans2 += expect != (i - '0');
            
            expect ^= 1;
        }
        
        return min(ans1, ans2);
    }   
};